/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.admin.Customer;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Systems;
import model.customer.Customer;
import model.manager.Manager;
import model.orders.Order;
import model.restaurants.Restaurant;

/**
 *
 * @author Siyuan He
 */
public class CustomerPane extends javax.swing.JPanel {

    /**
     * Creates new form CustomerPane
     */
    private Systems sys;
    private Customer customer;
    private String name = null;

    public CustomerPane(Systems sys, Customer customer) {
        initComponents();
        this.sys = sys;
        this.customer = customer;
        showRes();
        populateOrders();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cmbCity = new javax.swing.JComboBox<>();
        btnLogin = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblMenu = new javax.swing.JTable();
        txtOrder = new javax.swing.JTextField();
        btnOrder = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblOrderList = new javax.swing.JTable();
        txtcom = new javax.swing.JTextField();
        btncom = new javax.swing.JButton();

        cmbCity.setFont(new java.awt.Font("微软雅黑", 0, 14)); // NOI18N
        cmbCity.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbCityItemStateChanged(evt);
            }
        });
        cmbCity.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
                cmbCityAncestorRemoved(evt);
            }
        });
        cmbCity.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                cmbCityComponentResized(evt);
            }
        });
        cmbCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbCityActionPerformed(evt);
            }
        });

        btnLogin.setFont(new java.awt.Font("微软雅黑", 0, 14)); // NOI18N
        btnLogin.setText("View Info");
        btnLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoginActionPerformed(evt);
            }
        });

        tblMenu.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Dish"
            }
        ));
        jScrollPane1.setViewportView(tblMenu);

        btnOrder.setText("jButton1");
        btnOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOrderActionPerformed(evt);
            }
        });

        tblOrderList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Dish", "Status", "Restaurant", "Comments"
            }
        ));
        jScrollPane2.setViewportView(tblOrderList);

        btncom.setText("jButton1");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(btnLogin)
                        .addComponent(cmbCity, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnOrder, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtOrder))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(69, 69, 69)
                                .addComponent(btncom)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtcom, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 67, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 414, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(54, 54, 54))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(306, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtOrder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtcom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnLogin)
                    .addComponent(btnOrder)
                    .addComponent(btncom))
                .addGap(158, 158, 158))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cmbCityItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbCityItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbCityItemStateChanged

    private void cmbCityAncestorRemoved(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_cmbCityAncestorRemoved
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbCityAncestorRemoved

    private void cmbCityComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_cmbCityComponentResized
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbCityComponentResized

    private void cmbCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbCityActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_cmbCityActionPerformed

    private void btnLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoginActionPerformed
        // TODO add your handling code here:
        name = (String) cmbCity.getSelectedItem();
        System.out.println(name);

        if (name.equals("KFC")) {
            populateKFC();
        } else if (name.equals("Subway")) {
            populateSubway();
        } else if (name.equals("Soju")) {
            populateSoju();
        } else if (name.equals("Popeyes")) {
            populatePopeyes();
        }

    }//GEN-LAST:event_btnLoginActionPerformed

    private void btnOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOrderActionPerformed
        // TODO add your handling code here:
        Restaurant temp = null;
        for (Restaurant m : sys.getRestaurantDirectory().getRestaurantList()) {
            if (m.getName().equals(name)) {
                temp = m;
            }
        }

        boolean flag = false;
        for (String s : temp.getMenu()) {
            if (s.equalsIgnoreCase(txtOrder.getText())) {
                flag = true;
            }
        }
        if (!flag) {
            JOptionPane.showMessageDialog(this, "Please input correct Dish!", "Warning", JOptionPane.ERROR_MESSAGE);
            txtOrder.setText("");
            return;
        }
        customer.getOrders().add(new Order(txtOrder.getText(), temp));
        populateOrders();
    }//GEN-LAST:event_btnOrderActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLogin;
    private javax.swing.JButton btnOrder;
    private javax.swing.JButton btncom;
    private javax.swing.JComboBox<String> cmbCity;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblMenu;
    private javax.swing.JTable tblOrderList;
    private javax.swing.JTextField txtOrder;
    private javax.swing.JTextField txtcom;
    // End of variables declaration//GEN-END:variables

    private void populateKFC() {
        DefaultTableModel model = (DefaultTableModel) tblMenu.getModel();
        model.setRowCount(0);
        for (Restaurant m : sys.getRestaurantDirectory().getRestaurantList()) {
            if (m.getName().equals("KFC")) {
                for (String s : m.getMenu()) {
                    Object[] row = new Object[1];
                    row[0] = s;
                    model.addRow(row);
                }
            }
        }

//        for (String m : manager.getRestaurant().getMenu()) {
//
//            Object[] row = new Object[1];
//            row[0] = m;
//
//            model.addRow(row);
//        }
    }

    private void populateSubway() {
        DefaultTableModel model = (DefaultTableModel) tblMenu.getModel();
        model.setRowCount(0);
        for (Restaurant m : sys.getRestaurantDirectory().getRestaurantList()) {
            if (m.getName().equals("Subway")) {
                for (String s : m.getMenu()) {
                    Object[] row = new Object[1];
                    row[0] = s;
                    model.addRow(row);
                }
            }
        }
    }

    private void populateSoju() {
        DefaultTableModel model = (DefaultTableModel) tblMenu.getModel();
        model.setRowCount(0);
        for (Restaurant m : sys.getRestaurantDirectory().getRestaurantList()) {
            if (m.getName().equals("Soju")) {
                for (String s : m.getMenu()) {
                    Object[] row = new Object[1];
                    row[0] = s;
                    model.addRow(row);
                }
            }
        }

    }

    private void populatePopeyes() {
        DefaultTableModel model = (DefaultTableModel) tblMenu.getModel();
        model.setRowCount(0);
        for (Restaurant m : sys.getRestaurantDirectory().getRestaurantList()) {
            if (m.getName().equals("Popeyes")) {
                for (String s : m.getMenu()) {
                    Object[] row = new Object[1];
                    row[0] = s;
                    model.addRow(row);
                }
            }
        }
    }

    private void showRes() {
        cmbCity.addItem("KFC");
        cmbCity.addItem("Subway");
        cmbCity.addItem("Soju");
        cmbCity.addItem("Popeyes");
    }

    private void populateOrders() {
        DefaultTableModel model = (DefaultTableModel) tblOrderList.getModel();
        model.setRowCount(0);
        for (Order o : customer.getOrders()) {
            Object[] row = new Object[4];
            row[0] = o.getDish();
            if (o.isStatus()) {
                row[1] = "Accepted";
            } else {
                row[1] = "Not accepted";
            }
            row[2] = o.getRestaurant().getName();
//                    row[3] = m;
            model.addRow(row);
        }

    }
}
